// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  isAdmin     Boolean     @default(false)
  account     String      @unique
  password    String
  nickname    String?
  email       String?
  phoneNumber String?
  sex         Int         @default(1)
  status      Int         @default(1)
  avatar      String?
  remark      String?
  roles       Role[]
  deptId      Int?
  dept        Dept?       @relation(fields: [deptId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  loginLog    LoginLog[]
  recordLog   RecordLog[]
  factory     Factory[]
  Device      Device[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  value     String    @unique
  remark    String?
  users     User[]
  menus     Menu[]
  factory   Factory[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Menu {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  path        String       @unique
  icon        String       @default("")
  hidden      Boolean      @default(false)
  status      Int          @default(1)
  sort        Int          @default(1)
  roles       Role[]
  parentId    Int?
  parent      Menu?        @relation("MenuToMenu", fields: [parentId], references: [id])
  children    Menu[]       @relation("MenuToMenu")
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  value     String   @unique
  remark    String?
  menuId    Int?
  menu      Menu?    @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dept {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  parentId  Int?
  status    Int      @default(1)
  sort      Int      @default(1)
  remark    String?
  users     User[]
  children  Dept[]   @relation("DeptToDept")
  parent    Dept?    @relation("DeptToDept", fields: [parentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dict {
  id        Int        @id @default(autoincrement())
  name      String
  value     String
  remark    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  dictData  DictData[]
}

model DictData {
  id        Int      @id @default(autoincrement())
  dictId    Int
  dict      Dict     @relation(fields: [dictId], references: [id])
  name      String
  value     String
  sort      Int      @default(1)
  remark    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  account   String
  ip        String
  address   String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecordLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  account   String
  /// 操作动作
  action    String
  /// 操作模块
  module    String
  /// 信息
  message   String
  /// 详情
  detail    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Factory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    Int       @default(1)
  address   String    @default("")
  location  Int[]     @default([])
  remark    String?
  children  Factory[] @relation("FactoryToFactory")
  parent    Factory?  @relation("FactoryToFactory", fields: [parentId], references: [id])
  parentId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createrId Int
  creater   User      @relation(fields: [createrId], references: [id])
  valves    Valve[]
  role      Role[]
  Device    Device[]
}

model Device {
  id        Int      @id @default(autoincrement())
  name      String
  status    Int      @default(1)
  remark    String   @default("")
  factoryId Int
  factory   Factory  @relation(fields: [factoryId], references: [id])
  valves    Valve[]
  createrId Int
  creater   User     @relation(fields: [createrId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Valve {
  id        Int      @id @default(autoincrement())
  /// 阀门位号
  name      String
  /// 阀门品牌
  brand     String   @default("")
  /// 阀门型号
  model     String   @default("")
  /// 阀门序列号
  serial    String   @default("")
  /// 阀门口径
  caliber   String   @default("")
  /// 阀门磅级
  level     String   @default("")
  /// 阀体材质
  material  String   @default("")
  /// 泄露等级
  leak      String   @default("")
  /// 执行机构型号
  actuator  String   @default("")
  /// 定位器型号
  locator   String   @default("")
  /// 阀门故障位
  fault     String   @default("")
  status    Int      @default(1)
  remark    String   @default("")
  factoryId Int
  factory   Factory  @relation(fields: [factoryId], references: [id])
  /// 装置
  deviceId  Int?
  device    Device?  @relation(fields: [deviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
