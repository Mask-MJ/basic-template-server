// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 用户模型
model User {
  id          Int         @id @default(autoincrement())
  /// 是否管理员
  isAdmin     Boolean     @default(false)
  /// 账号
  account     String      @unique
  /// 密码
  password    String
  /// 昵称
  nickname    String?
  /// 邮箱
  email       String?
  /// 手机号
  phoneNumber String?
  /// 性别
  sex         Int         @default(1)
  /// 状态
  status      Int         @default(1)
  /// 头像
  avatar      String?
  remark      String?
  roles       Role[]
  deptId      Int?
  dept        Dept?       @relation(fields: [deptId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  loginLog    LoginLog[]
  recordLog   RecordLog[]
  factory     Factory[]
  Device      Device[]
  Contract    Contract[]
}

/// 角色模型
model Role {
  id        Int       @id @default(autoincrement())
  /// 角色名称
  name      String
  /// 角色值
  value     String    @unique
  remark    String?
  users     User[]
  menus     Menu[]
  factory   Factory[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

/// 菜单模型
model Menu {
  id          Int          @id @default(autoincrement())
  /// 菜单名称
  name        String       @unique
  /// 菜单路径
  path        String       @unique
  /// 菜单图标
  icon        String       @default("")
  /// 是否隐藏
  hidden      Boolean      @default(false)
  /// 菜单状态
  status      Int          @default(1)
  /// 排序
  sort        Int          @default(1)
  roles       Role[]
  parentId    Int?
  parent      Menu?        @relation("MenuToMenu", fields: [parentId], references: [id])
  children    Menu[]       @relation("MenuToMenu")
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

/// 权限模型
model Permission {
  id        Int      @id @default(autoincrement())
  /// 权限名称
  name      String
  /// 权限值
  value     String   @unique
  remark    String?
  /// 绑定菜单id
  menuId    Int?
  menu      Menu?    @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 部门模型
model Dept {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  parentId  Int?
  status    Int      @default(1)
  sort      Int      @default(1)
  remark    String?
  users     User[]
  children  Dept[]   @relation("DeptToDept")
  parent    Dept?    @relation("DeptToDept", fields: [parentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 字典模型
model Dict {
  id        Int        @id @default(autoincrement())
  /// 字典名称
  name      String
  /// 字典值
  value     String
  remark    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  dictData  DictData[]
}

/// 字典数据模型
model DictData {
  id        Int      @id @default(autoincrement())
  /// 字典id
  dictId    Int
  dict      Dict     @relation(fields: [dictId], references: [id])
  /// 字典数据名称
  name      String
  /// 字典数据值
  value     String
  /// 排序
  sort      Int      @default(1)
  /// 备注
  remark    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 登录日志模型
model LoginLog {
  id        Int      @id @default(autoincrement())
  /// 用户id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  /// 账号
  account   String
  /// ip地址
  ip        String
  /// ip地址对应的地理位置
  address   String
  /// 用户操作
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 日志模型
model RecordLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  /// 账号
  account   String
  /// 操作动作
  action    String
  /// 操作模块
  module    String
  /// 信息
  message   String
  /// 详情
  detail    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 工厂模型
model Factory {
  id        Int        @id @default(autoincrement())
  /// 工厂名称
  name      String     @unique
  /// 工厂状态
  status    Int        @default(1)
  /// 工厂地址
  address   String     @default("")
  /// 工厂经纬度
  location  Int[]      @default([])
  /// 工厂备注
  remark    String?
  children  Factory[]  @relation("FactoryToFactory")
  parent    Factory?   @relation("FactoryToFactory", fields: [parentId], references: [id])
  parentId  Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  createrId Int
  creater   User       @relation(fields: [createrId], references: [id])
  valves    Valve[]
  role      Role[]
  Device    Device[]
  Contract  Contract[]
}

/// 项目模型
model Contract {
  id             Int      @id @default(autoincrement())
  /// 项目名称
  name           String
  /// 签订合同时间
  contractTime   DateTime
  /// 采购阀门总数
  valveCount     Int
  /// 高级阀门数量
  highValveCount Int
  /// 客户名称
  customer       String
  /// 客户联系方式
  customerPhone  String
  /// 销售人员
  saler          String
  /// 项目备注
  remark         String?
  /// 工厂id
  factoryId      Int
  factory        Factory  @relation(fields: [factoryId], references: [id])
  createrId      Int
  creater        User     @relation(fields: [createrId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

/// 装置模型
model Device {
  id        Int      @id @default(autoincrement())
  /// 装置名称
  name      String
  /// 装置状态
  status    Int      @default(1)
  /// 装置备注
  remark    String   @default("")
  /// 工厂id
  factoryId Int
  factory   Factory  @relation(fields: [factoryId], references: [id])
  /// 关联阀门
  valves    Valve[]
  createrId Int
  creater   User     @relation(fields: [createrId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 阀门模型
model Valve {
  id        Int      @id @default(autoincrement())
  /// 阀门位号
  name      String
  /// 阀门品牌
  brand     String   @default("")
  /// 阀门型号
  model     String   @default("")
  /// 阀门序列号
  serial    String   @default("")
  /// 阀门口径
  caliber   String   @default("")
  /// 阀门磅级
  level     String   @default("")
  /// 阀体材质
  material  String   @default("")
  /// 泄露等级
  leak      String   @default("")
  /// 执行机构型号
  actuator  String   @default("")
  /// 定位器型号
  locator   String   @default("")
  /// 阀门故障位
  fault     String   @default("")
  status    Int      @default(1)
  remark    String   @default("")
  /// 工厂id
  factoryId Int
  factory   Factory  @relation(fields: [factoryId], references: [id])
  /// 关联装置id
  deviceId  Int?
  device    Device?  @relation(fields: [deviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 单位模型
model Unit {
  id        Int      @id @default(autoincrement())
  /// 单位名称
  name      String
  /// 单位值
  value     String
  /// 备注
  remark    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
